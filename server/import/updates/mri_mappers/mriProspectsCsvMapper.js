/*
 * Copyright (c) 2022 Reva Technology Inc., all rights reserved.
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Licensed under the Elastic License 2.0; you may not use this file except
 * in compliance with the Elastic License 2.0.
 */

import { converter } from '../../converters/mappers/converter';
import { DALTypes } from '../../../../common/enums/DALTypes';

const SKIP_VALUES = ['ResProspects', 'Name_Id'];

const INCLUDED_STATUS = ['1', '2', '6'];

const isValid = row => !SKIP_VALUES.includes(row.Name_Id) && INCLUDED_STATUS.includes(row.Status);

export const CSV_HEADERS = [
  'Name_Id',
  'Ext_Ref_Prospect_Id',
  'Tenant_Code',
  'Ext_Ref_Tenant_Id',
  'FirstName',
  'MiddleName',
  'LastName',
  'Parent_Code',
  'Salutation',
  'Address1',
  'Address2',
  'City',
  'State',
  'ZipCode',
  'HowLong',
  'HomePhone',
  'OfficePhone',
  'CellPhone',
  'Fax',
  'FedId',
  'Email',
  'Date_Of_Birth',
  'Drivers_License',
  'DLState',
  'Income',
  'RelationShip',
  'Occupant',
  'LeaseStep',
  'Status',
  'Preferred_Rent',
  'Preferred_Bedrooms',
  'Preferred_Bath',
  'Preferred_MoveIn',
  'Property_Code',
  'Ref_Property_ID',
  'UnitType_Code',
  'Unit_Code',
  'LeaseFrom',
  'LeaseTo',
  'Source',
  'SecondarySource',
  'Agent',
  'Previous_Address1',
  'Previous_Address2',
  'Previous_City',
  'Previous_State',
  'Previous_ZipCode',
  'Previous_HowLong',
  'Previous2_Address1',
  'Previous2_Address2',
  'Previous2_City',
  'Previous2_State',
  'Previous2_ZipCode',
  'Company',
  'Position',
  'DtStart',
  'Emp_Address1',
  'Emp_Address2',
  'Emp_City',
  'Emp_State',
  'Emp_Zip',
  'Emp_Phone ',
  'EmergencyCont_Name',
  'EmergencyCont_Relation',
  'EmergencyCont_TelHome',
  'Emergency_Phone',
  'AutoType1',
  'AutoColor1',
  'License1',
  'State1',
  'AutoType2',
  'AutoColor2',
  'License2',
  'State2',
  'First_Contacted_On',
  'Date_Show',
  'Date_Applied',
  'Date_Approved',
  'Date_Canceled',
  'Date_Denied',
  'Payment',
  'Check_Number',
  'Notes',
  'Summary',
  'Subsidized',
  'CardType',
  'CardNumber ',
  'CardExpiration',
  'LeaseTerm',
  'FirstContactType',
  'Applicant',
  'QuotedRent',
  'Customer',
  'TelAlt',
  'WebLinks',
  'B50059',
  'TaxCredit',
  'Home',
  'RD',
  'FailValidation',
  'Aff_Lease_Step',
  'ShowAgent',
  'Country',
  'Address3',
  'Address4',
  'WebLinksStep',
  'ProspectCopiedTo',
  'ProspectCopiedFrom',
  'Roommate_Code',
  'Roommate_LastName',
  'Roommate_FirstName',
  'Room',
  'Bed',
  'Student',
  'SLeadxRef',
  'InterFaceConfig',
  'Maiden_Name',
  'CurrentAddress_StartDate',
  'CurrentAddress_MonthlyRent',
  'CurrentAddress_ReasonForMoving',
  'PreviousAddress_StartDate',
  'PreviousAddress_MonthlyRent',
  'PreviousAddress_ReasonForMoving',
  'CurrentEmployment_AdditionalIncome',
  'CurrentEmployment_AdditionalIncomeSource',
  'Ref_Unit_Id',
];

export const NEW_CSV_HEADERS = [
  'externalId',
  'fullName',
  'preferredName',
  'homePhone',
  'officePhone',
  'cellPhone',
  'fax',
  'email',
  'state',
  'marketRent',
  'numBedrooms',
  'moveInDate',
  'property',
  'agent',
  'member',
  'dateApplied',
  'prospectCode',
  'firstContactedOn',
  'firstContactType',
  'dateShow',
  'showAgent',
  'source',
];

const MAPPING = [
  { csv: 'Name_Id', excel: 'externalId' },
  {
    excel: 'fullName',
    fn: row => {
      const names = [row.FirstName];
      if (row.LastName !== 'No Last Name') names.push(row.LastName);
      return names.join(' ').trim();
    },
  },
  { csv: 'FirstName', excel: 'preferredName' },
  { csv: 'HomePhone', excel: 'homePhone' },
  { csv: 'OfficePhone', excel: 'officePhone' },
  { csv: 'CellPhone', excel: 'cellPhone' },
  { csv: 'Fax', excel: 'fax' },
  { csv: 'Email', excel: 'email' },
  {
    excel: 'state',
    fn: row => {
      switch (row.Status) {
        case '1':
        case '2':
          return DALTypes.PartyStateType.PROSPECT;
        case '6':
          return !row.Date_Show.trim() ? DALTypes.PartyStateType.CONTACT : DALTypes.PartyStateType.PROSPECT;
        default:
          return '';
      }
    },
  },
  { csv: 'Preferred_Rent', excel: 'marketRent' },
  { csv: 'Preferred_Bedrooms', excel: 'numBedrooms' },
  { csv: 'Preferred_MoveIn', excel: 'moveInDate' },
  { csv: 'Property_Code', excel: 'property' },
  { csv: 'Agent', excel: 'agent' },
  { csv: 'Parent_Code', excel: 'member' },
  { csv: 'Date_Applied', excel: 'dateApplied' },
  { csv: 'Name_Id', excel: 'prospectCode' },
  { csv: 'First_Contacted_On', excel: 'firstContactedOn' },
  { csv: 'FirstContactType', excel: 'firstContactType' },
  { csv: 'Date_Show', excel: 'dateShow' },
  { csv: 'ShowAgent', excel: 'showAgent' },
  { csv: 'Source', excel: 'source' },
];

export const REQUIRED_HEADERS = [
  'Name_Id',
  'FirstName',
  'LastName',
  'HomePhone',
  'OfficePhone',
  'CellPhone',
  'Fax',
  'Email',
  'Preferred_Rent',
  'Preferred_Bedrooms',
  'Preferred_MoveIn',
  'Property_Code',
  'Agent',
  'Parent_Code',
  'Date_Applied',
  'First_Contacted_On',
  'FirstContactType',
  'Date_Show',
  'ShowAgent',
  'Source',
];

export const mriProspectsCsvMapper = row => ({
  valid: isValid(row),
  data: converter(row, NEW_CSV_HEADERS, MAPPING),
});
