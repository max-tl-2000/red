/********************************************************** RecurringJobs **********************************************************/
   INSERT INTO db_namespace."RecurringJobs" AS rec
        (id, name, "lastRunAt", schedule, metadata, notes, "inactiveSince")
      VALUES
      /*

        ("public".gen_random_uuid(),'CallQueueEndOfDay', now(), '0 *//*3 * * * *', '{}'::jsonb, 'Run every 3 minutes', NULL),
        ("public".gen_random_uuid(),'TasksFollowupParty', now(), '0 *//*10 * * * *','{}'::jsonb, 'Run every 10 minutes', NULL),

        --- maybe once we finish with the 20180618144611_update_RecurringJobs_default_values_allTenants.js file we can uncomment this
        */
        ("public".gen_random_uuid(),'ScreeningResponseValidation', now(), '0 0 * * * *', '{}'::jsonb, 'Run every hour at minute 0', NULL),
        ("public".gen_random_uuid(),'CheckIncomingFiles', now(), '0 0 * * * *', '{}'::jsonb, 'Run every hour at minute 0', NULL),
        ("public".gen_random_uuid(),'ExportOneToManys', now(), '0 15 21 * * *', '{}'::jsonb, 'Run every day at 21:15', NULL),
        ("public".gen_random_uuid(),'FetchLeasesStatus', now(), '0 20 * * * *', '{}'::jsonb, 'Run every hour at minute 20', NULL),
        ("public".gen_random_uuid(),'FetchAndStoreTransactions', now(), '0 1 * * * *', '{}'::jsonb, 'Run every hour at minute 1', NULL),
        ("public".gen_random_uuid(),'CleanupOldRecordsFromBigTables', now(), '0 15 0 * * *', '{"batchSize": 10000, "daysToKeep": 14, "versionsToKeep": 1}'::jsonb, 'Run every day at 00:15', NULL),
        ("public".gen_random_uuid(),'ScreeningMonitor', now(), '0 0 0 * * *', '{}'::jsonb, 'Run every day at 00:00', NULL),
        ("public".gen_random_uuid(),'UpdatePostMonth', now(), '0 5 * * * *', '{}'::jsonb, 'Run every hour at minute 5', NULL),
        ("public".gen_random_uuid(),'LongRunningScreeningRequests', now(), '0 */5 * * * *', '{}'::jsonb, 'Run every 5 minutes', NULL),
        ("public".gen_random_uuid(),'CheckForOrphanScreeningRequests', now(), '0 */5 * * * *', '{}'::jsonb, 'Run every 5 minutes', NULL),
        ("public".gen_random_uuid(),'DetachProgramPhoneNumbers', now(), '0 30 01 * * *', '{}'::jsonb, 'Run every day at 01:30', NULL),
        ("public".gen_random_uuid(),'PartyDocumentsMonitor', now(), '0 25 * * * *', '{}'::jsonb, 'Run every hour at minute 25', NULL),
        ("public".gen_random_uuid(),'ImportAndProcessPartyWorkflows', now() + INTERVAL '5 day', '0 0 01 * * *', '{}'::jsonb, 'Run every day at 01:00', NULL),
        ("public".gen_random_uuid(),'CommsMonitor', now(), '0 */30 * * * *', '{}'::jsonb, 'Run every 30 minutes', NULL),
        ("public".gen_random_uuid(),'MarkEveryoneUnavailable', now(), '0 0 0 * * *', '{}'::jsonb, 'Run every day at 00:00', NULL),
        ("public".gen_random_uuid(),'VacatePartyMembers', now(), '0 10 * * * *', '{}'::jsonb, 'Run every hour at minute 10', NULL),
        ("public".gen_random_uuid(),'ExportToYardi', now(), '0 45 20 * * *', '{}'::jsonb, 'Run every day at 20:45', NULL),
        ("public".gen_random_uuid(),'SyncExternalCalendarEvents', now(), '0 30 02 * * *', '{}'::jsonb, 'Run every day at 02:30', NULL),
        ("public".gen_random_uuid(),'MRIExportMonitor', now(), '0 10 0 * * *', '{}'::jsonb, 'Run every day at 00:10', NULL),
        ("public".gen_random_uuid(),'AssignActiveLeaseToRSTeams', now(), '0 45 01 * * *', '{}'::jsonb, 'Run every day at 01:45', NULL),
        ("public".gen_random_uuid(),'SyncBMLeaseSignatures', now(), '0 */5 * * * *', '{}'::jsonb, 'Run every 5 minutes', now()),
        ("public".gen_random_uuid(),'ApplicationDeclinedHandler', now(), '0 7,19 * * *', '{}'::jsonb, 'Run every day at 07:00 and 19:00', now())
      ON CONFLICT(name) DO UPDATE SET "lastRunAt" = now() WHERE rec."lastRunAt" IS NULL;

/********************************************************** AppSettings **********************************************************/
INSERT INTO db_namespace."AppSettings"
        (id, key, value, category, description, "datatype")
      VALUES
        ("public".gen_random_uuid(),
         'SendAppointmentCreatedEmail',
         'true',
         'Email',
         'When an appointment is created send email to required residents',
         'Bool'),
        ("public".gen_random_uuid(),
         'SendAppointmentCreatedSMS',
         'true',
         'SMS',
         'When an appointment is created send SMS to required residents',
         'Bool'),
        ("public".gen_random_uuid(),
         'SendLeaseExecutedEmail',
         'true',
         'Email',
         'When a lease is executed send an email to all residents included on the lease',
         'Bool'),
        ("public".gen_random_uuid(),
         'SendLeaseVoidedEmail',
         'true',
         'Email',
         'When a lease is voided send email to all residents who received or signed the lease',
         'Bool'),
        ("public".gen_random_uuid(),
         'SendAppointmentUpdatedEmail',
         'true',
         'Email',
         'When an appointment is updated send email to required residents',
         'Bool'),
        ("public".gen_random_uuid(),
         'SendAppointmentUpdatedSMS',
         'true',
         'SMS',
         'When an appointment is updated send SMS to required residents',
         'Bool'),
        ("public".gen_random_uuid(),
         'SendAppointmentCanceledEmail',
         'true',
         'Email',
         'When an appointment is canceled send email to required residents',
         'Bool'),
        ("public".gen_random_uuid(),
         'SendAppointmentCanceledSMS',
         'true',
         'SMS',
         'When an appointment is canceled send SMS to required residents',
         'Bool'),
        ("public".gen_random_uuid(),
         'SendApplicationDeclinedEmail',
         'true',
         'Email',
         'When an application is declined send an email to the resident',
         'Bool'),
        ("public".gen_random_uuid(),
         'SendRegistrationEmail',
         'true',
         'Email',
         'When an application payment is confirmed, send an email to the resident to complete the registration',
         'Bool'),
        ("public".gen_random_uuid(),
         'ApplicationDeniedEmailTemplate',
         'application-decision-denied',
         'EmailTemplate',
         'The name of the template to use when sending emails on application denied',
         'Text'),
        ("public".gen_random_uuid(),
         'ApplicationCompleteRegistrationEmailTemplate',
         'application-complete-registration',
         'EmailTemplate',
         'The name of the template to use when the payment for an application is completed',
         'Text'),
         ("public".gen_random_uuid(),
         'ContractSentEmailTemplate',
         'contract-sent',
         'EmailTemplate',
         'The name of the template to use when sending emails on contract sent',
         'Text'),
        ("public".gen_random_uuid(),
         'ContractVoidedEmailTemplate',
         'contract-voided',
         'EmailTemplate',
         'The name of the template to use when sending emails on contract voided',
         'Text'),
        ("public".gen_random_uuid(),
         'ContractExecutedEmailTemplate',
         'contract-executed',
         'EmailTemplate',
         'The name of the template to use when sending emails on contract executed',
         'Text'),
         ("public".gen_random_uuid(),
         'SendLeaseSentEmail',
         'true',
         'Email',
         'When a lease is sent send email to all residents who will not sign in the office',
         'Bool'),
         ("public".gen_random_uuid(),
        'QuoteSentEmailTemplate',
        'application-a2r-invite-quote',
        'EmailTemplate',
        'The name of the template to use when sending an quote email',
        'Text'),
        ("public".gen_random_uuid(),
        'SendQuoteEmail',
        'true',
        'Email',
        'When a quote is published, send email to all partyMembers with the quote',
        'Bool'),
        ("public".gen_random_uuid(),
          'ResidentToGuarantorQuoteTemplate',
          'application-r2g-invite-quote',
          'EmailTemplate',
          'The name of the template to use when a resident is sending an application invite email to a guarantor and a quote is published',
          'Text'),
         ("public".gen_random_uuid(),
          'ResidentToResidetQuoteTemplate',
          'application-r2r-invite-quote',
          'EmailTemplate',
          'The name of the template to use when a resident is sending an application invite email to a resident and a quote is published',
          'Text'),
         ("public".gen_random_uuid(),
          'OccupantToResidentQuoteTemplate',
          'application-o2r-invite-quote',
          'EmailTemplate',
          'The name of the template to use when an occupant is sending an application invite email to a resident and a quote is published',
          'Text'),
          ("public".gen_random_uuid(),
          'SendResidentToGuarantorApplicationInviteEmail',
          'true',
          'Email',
          'When payment is received, send email to the invited guarantor from application form phase 1',
          'Bool'),
          ("public".gen_random_uuid(),
          'SendResidentToResidentApplicationInviteEmail',
          'true',
          'Email',
          'When payment is received, send email to all invited residents from application form phase 1',
          'Bool'),
          ("public".gen_random_uuid(),
          'SendOccupantToResidentApplicationInviteEmail',
          'true',
          'Email',
          'When payment is received, send email to all invited residents from application form phase 1',
          'Bool'),
          ("public".gen_random_uuid(),
        'RenewalLetterEmailTemplate',
        'renewal-a2r-summary-quote',
        'EmailTemplate',
        'The name of the template to use when sending a renewal letter',
        'Text'),
      ("public".gen_random_uuid(),
        'SendRenewalLetterEmail',
        'true',
        'Email',
        'When a renewal letter is published, send email to all partyMembers with the letter',
        'Bool');